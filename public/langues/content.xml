// app/[locale]/page.tsx
import { getContent } from '@/lib/loadContent';
import Image from 'next/image';
import {
  Card,
  CardContent,
} from '@/components/ui/card';
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
} from '@/components/ui/carousel';

export default async function Page(props: {
  params: Promise<{ locale: string }>;
}) {
  const { locale } = await props.params;
  const p = await getContent(locale);

  const profil   = p.profile[0];
  const skills   = p.skills[0].category;
  const projects = p.projects[0].project;
  const education= p.education[0].item;
  const videoUrl = p.video?.[0]?.url?.[0];

  /* ───────────────────────────────────────────────────────── */

  return (
    <div
      className="flex flex-col lg:flex-row gap-0"
      vocab="https://schema.org/"
      typeof="Person"
    >
      {/* ============ SIDEBAR ============ */}
      <aside
        resource="#sidebar"
        typeof="WebPageElement"
        className="fixed left-0 top-0 h-screen w-80 bg-gradient-to-b from-gray-100 to-gray-200 px-6 py-8 shadow-lg overflow-y-auto space-y-6 z-20"
      >
        {/* Photo */}
        <div className="flex justify-center mb-4" property="image" typeof="ImageObject">
          <div className="relative w-40 h-40 overflow-hidden rounded-full ring-4 ring-gray-300 hover:scale-105 transition">
            {profil.photo?.[0]?.$?.src && (
              <Image
                src={profil.photo[0].$.src}
                alt={profil.photo[0].$.alt || 'photo'}
                fill
                className="object-cover"
                property="contentUrl"
              />
            )}
          </div>
        </div>

        {/* Nom + âge + localisation (reste sous Person) */}
        <div className="text-center space-y-1">
          <h1 className="text-2xl font-bold" property="name">
            {profil.name[0]}
          </h1>
          <p className="text-sm text-gray-700">
            <span property="birthDate">{profil.age[0]}</span> ans&nbsp;•&nbsp;
            <span property="address">{profil.location[0]}</span>
          </p>
        </div>

        {/* ContactPoint = uniquement contact */}
        <div
          typeof="ContactPoint"
          property="contactPoint"
          className="text-center space-y-0.5 mt-2"
        >
          <a
            href={`mailto:${profil.email[0]}`}
            className="block underline hover:text-blue-600"
            property="email"
          >
            {profil.email[0]}
          </a>

          {/* retire les espaces pour href, conserve lisible à l’écran */}
          <a
            href={`tel:${profil.phone[0].replace(/\s+/g, '')}`}
            className="block underline hover:text-blue-600"
            property="telephone"
          >
            {profil.phone[0]}
          </a>

          <a
            href={profil.linkedin[0].$.url}
            target="_blank"
            rel="noopener noreferrer"
            className="block text-gray-600 underline"
            property="sameAs"
          >
            LinkedIn
          </a>

          <a
            href={profil.github[0].$.url}
            target="_blank"
            rel="noopener noreferrer"
            className="block text-gray-600 underline"
            property="sameAs"
          >
            GitHub
          </a>
        </div>

        {/* Intérêts */}
        <section typeof="ItemList" property="knowsAbout">
          <h2 className="font-semibold">Intérêts</h2>
          <ul className="list-disc list-inside text-sm">
            {profil.interests[0].item.map((it: string, i: number) => (
              <li key={`${it}-${i}`} property="itemListElement">
                {it}
              </li>
            ))}
          </ul>
        </section>

        {/* Langues : un seul typeof (ItemList) */}
        <section typeof="ItemList" property="knowsLanguage">
          <h2 className="font-semibold">Langues</h2>
          <ul className="text-sm space-y-0.5">
            {profil.languages[0].lang.map((l: any, i: number) => (
              <li
                key={`${l.$.name}-${i}`}
                className="flex items-center gap-1"
                property="itemListElement"
                typeof="Language"
              >
                <span className="font-medium" property="name">
                  {l.$.name}
                </span>
                <span className="text-xs text-gray-600">
                  ({l.$.level})
                </span>
              </li>
            ))}
          </ul>
        </section>

        {/* Compétences */}
        <section typeof="ItemList" property="hasSkill">
          <h2 className="font-semibold">Compétences</h2>
          <ul className="text-sm space-y-2">
            {skills.map((cat: any, i: number) => (
              <li
                key={`${cat['@_name']}-${i}`}
                className="bg-white hover:bg-gray-50 transition p-3 rounded-lg shadow-sm"
                property="itemListElement"
                typeof="DefinedTerm"
              >
                <span className="font-medium block text-gray-800" property="name">
                  {cat['@_name']}
                </span>
                <span className="text-xs text-gray-600" property="description">
                  {cat.skill.join(', ')}
                </span>
              </li>
            ))}
          </ul>
        </section>
      </aside>

      {/* ============ MAIN ============ */}
      {/* … (le reste de ton composant ne change pas) … */}
    </div>
  );
}

